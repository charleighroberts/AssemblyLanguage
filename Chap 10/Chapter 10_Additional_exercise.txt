%include "/usr/local/share/csc314/asm_io.inc"


segment .data
prompt db "Enter a year: ",0
leap db " is a leap year.",0
not_leap db " is not a leap year.",0

segment .bss
year resd 1

segment .text
        global  asm_main

asm_main:
        push    ebp
        mov             ebp, esp
        ; ********** CODE STARTS HERE **********
        mov eax, prompt         ; eax = address of prompt
        call print_string       ; print prompt
        call read_int           ; read the year value
        mov [year], eax         ; store the entered year in year label
    push eax                    ; push the year value into the stack
        call is_leap_year       ; the returned value is eax (either 0 or 1)
        mov ebx, eax        ; ebx = the returned value
        mov eax, [year]
        call print_int
    cmp ebx,0
        je notleap              ; if the returned value is 0 (false)
    mov eax, leap
        call print_string
        jmp endleap

notleap:
        mov eax, not_leap
        call print_string

endleap:
        call print_nl

        ; *********** CODE ENDS HERE ***********
        mov             eax, 0
        mov             esp, ebp
        pop             ebp
        ret

is_leap_year:
        enter 12, 0                     ; reserve space for 3 local variables,
                                                ; they are accessed at ebp-4 (holds if the remainder of the division of year by 4),
                                                ; ebp - 8 (holds the remainder of the division of year by 100) and
                                                ; ebp -12 (holds the remainder of the division of year by 400)
                                                ; the iput parameter for the subprogram is at ebp+8
        mov eax, [ebp+8]        ; eax:= the entered year
        CDQ
        mov ecx, 4
        idiv ecx                        ; divide the year by 4 and test the remainder
        mov [ebp-4], edx        ; the remainder of the division of year by 4 is at ebp-4

        mov eax, [ebp+8]        ; eax:= the entered year
        CDQ
        mov ecx, 100
        idiv ecx                        ; divide the year by 100 and test the remainder
        mov [ebp-8], edx        ; the remainder of the division of year by 100 is at ebp-8

        mov eax, [ebp+8]        ; eax:= the entered year
        CDQ
        mov ecx, 400
        idiv ecx                        ; divide the year by 400 and test the remainder
        mov [ebp-12], edx       ; the remainder of the division of year by 400 is at ebp-12

    mov esi, [ebp-4]
        cmp esi, 0
        jne notLeap

    mov esi, [ebp-8]
        cmp esi, 0
        jne Leap

        mov esi, [ebp-12]
        cmp esi, 0
        je Leap

notLeap:
        mov eax, 0
        jmp end

Leap:
        mov eax, 1
        jmp end

end:
        leave
        ret